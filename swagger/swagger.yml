swagger: "2.0"
info:
  title: Go Car Rental API
  description: |
    Static autogenerated API for Go Car Rental using Beego Swagger
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    name: Go Car Rental
    url: http://localhost:8080/
    email: wojciech.bernatek@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: localhost:8080
basePath: /v1
schemes:
- HTTP
- ' HTTPS'
paths:
  /car/:
    get:
      tags:
      - car
      description: |-
        Get all Cars
        <br>
      operationId: CarController.GetAllCars
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Car'
        "404":
          description: '{string} error: "message"'
    post:
      tags:
      - car
      description: |-
        Create Car
        <br>
      operationId: CarController.CreateCar
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Body for Car content
        required: true
        schema:
          $ref: '#/definitions/dtos.CarDto'
      responses:
        "201":
          description: '{string} message: "Created car: RegPlate"'
        "403":
          description: '{string} error: "message"'
  /car/{id}:
    get:
      tags:
      - car
      description: |-
        Get Car by id
        <br>
      operationId: CarController.GetCar
      parameters:
      - in: path
        name: id
        description: The id of car to get
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Car'
        "403":
          description: '{string} error: "message"'
    put:
      tags:
      - car
      description: |-
        update the Car
        <br>
      operationId: CarController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Car content
        required: true
        schema:
          $ref: '#/definitions/dtos.CarDto'
      responses:
        "200":
          description: '{string} message: "Updated car: id"'
        "403":
          description: '{string} error: "message"'
    delete:
      tags:
      - car
      description: |-
        delete the Car
        <br>
      operationId: CarController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} message: "Deleted car: id"'
        "403":
          description: '{string} error: "message"'
  /user/:
    get:
      tags:
      - user
      description: |-
        Get all Users
        <br>
      operationId: UserController.GetAll
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: '{string} error: "message"'
  /user/{id}:
    get:
      tags:
      - user
      description: |-
        Get user by id
        <br>
      operationId: UserController.Get
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: The id of user to get
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: '{string} error: "message"'
    put:
      tags:
      - user
      description: |-
        Update the user
        <br>
      operationId: UserController.Update
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Body for user content
        required: true
        schema:
          $ref: '#/definitions/dtos.UserDto'
      responses:
        "200":
          description: '{string} message: "Updated user: id"'
        "403":
          description: '{string} error: "message"'
    delete:
      tags:
      - user
      description: |-
        delete the user
        <br>
      operationId: UserController.Delete
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: '{string} message: "Deleted user: id"'
        "403":
          description: '{string} error: "message"'
  /user/login:
    post:
      tags:
      - user
      description: |-
        Logs user into the system
        <br>
      operationId: UserController.Login
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Body of user login info
        required: true
        schema:
          $ref: '#/definitions/dtos.UserLoginDto'
      responses:
        "200":
          description: '{string} message: "Login success for user: username"'
        "403":
          description: '{string} error: "message"'
  /user/logout:
    post:
      tags:
      - user
      description: |-
        Logs out current logged in user session
        <br>
      operationId: UserController.Logout
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{string} Logout success!'
  /user/register:
    post:
      tags:
      - user
      description: |-
        Register user into the system
        <br>
      operationId: UserController.Register
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Body of user register info
        required: true
        schema:
          $ref: '#/definitions/dtos.UserDto'
      responses:
        "200":
          description: '{string} message: "Register success for user: username"'
        "403":
          description: '{string} error: "message"'
definitions:
  dtos.CarDto:
    title: CarDto
    type: object
    properties:
      make:
        type: string
      model:
        type: string
      regplate:
        type: string
  dtos.UserDto:
    title: UserDto
    type: object
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
  dtos.UserLoginDto:
    title: UserLoginDto
    type: object
    properties:
      password:
        type: string
      username:
        type: string
  models.Car:
    title: Car
    type: object
    properties:
      Created:
        type: string
        format: datetime
      Id:
        type: integer
        format: int64
      Make:
        type: string
      Model:
        type: string
      RegPlate:
        type: string
      Updated:
        type: string
        format: datetime
  models.User:
    title: User
    type: object
    properties:
      Created:
        type: string
        format: datetime
      Email:
        type: string
      Id:
        type: integer
        format: int64
      Password:
        type: string
      Updated:
        type: string
        format: datetime
      Username:
        type: string
      Uuid:
        type: string
tags:
- name: user
  description: |
    Operations about Users
- name: car
  description: |
    CarController operations for Car
