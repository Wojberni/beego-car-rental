swagger: "2.0"
info:
  title: beego Test API
  description: |
    beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /user/:
    get:
      tags:
      - user
      description: |-
        Get all Users
        <br>
      operationId: UserController.GetAll
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: '{string} Error retrieving data, please try again later!'
    post:
      tags:
      - user
      description: |-
        Create user
        <br>
      operationId: UserController.CreateUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{string} Created user with Uuid!'
        "403":
          description: '{string} Data missing, please fill all data!'
  /user/{uid}:
    put:
      tags:
      - user
      description: |-
        Update the user
        <br>
      operationId: UserController.Update
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: uuid
        description: The uuid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: Body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: '{string} Uuid is not int!'
    delete:
      tags:
      - user
      description: |-
        delete the user
        <br>
      operationId: UserController.Delete
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} Deleted user: uuid'
        "403":
          description: '{string} User not found: uuid'
  /user/{uuid}:
    get:
      tags:
      - user
      description: |-
        Get user by uuid
        <br>
      operationId: UserController.Get
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: uid
        description: The uuid of user to get
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: '{string} Uuid is empty!'
  /user/login:
    get:
      tags:
      - user
      description: |-
        Logs user into the system
        <br>
      operationId: UserController.Login
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: query
        name: username
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        "200":
          description: '{string} Login success!'
        "403":
          description: '{string} User does not exist!'
  /user/logout:
    get:
      tags:
      - user
      description: |-
        Logs out current logged in user session
        <br>
      operationId: UserController.logout
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{string} Logout success!'
  /user/register:
    get:
      tags:
      - user
      description: |-
        Register user into the system
        <br>
      operationId: UserController.Register
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: query
        name: username
        description: The username for register
        required: true
        type: string
      - in: query
        name: password
        description: The password for register
        required: true
        type: string
      - in: query
        name: email
        description: The email for register
        required: true
        type: string
      responses:
        "200":
          description: '{string} Register success!'
        "403":
          description: '{string} Register failure! Fill all fields!'
definitions:
  models.User:
    title: User
    type: object
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
      uuid:
        type: string
tags:
- name: user
  description: |
    Operations about Users
