{
    "swagger": "2.0",
    "info": {
        "title": "Go Car Rental API",
        "description": "Static autogenerated API for Go Car Rental using Beego Swagger\n",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "name": "Go Car Rental",
            "url": "http://localhost:8080/",
            "email": "wojciech.bernatek@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "host": "localhost:8080",
    "basePath": "/v1",
    "schemes": [
        "HTTP",
        " HTTPS"
    ],
    "paths": {
        "/user/": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "Get all Users\n\u003cbr\u003e",
                "operationId": "UserController.GetAll",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "404": {
                        "description": "{string} Error retrieving data, please try again later!"
                    }
                }
            },
            "post": {
                "tags": [
                    "user"
                ],
                "description": "Create user\n\u003cbr\u003e",
                "operationId": "UserController.CreateUser",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body for user content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} Created user with Uuid!"
                    },
                    "403": {
                        "description": "{string} Data missing, please fill all data!"
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "tags": [
                    "user"
                ],
                "description": "Logs user into the system\n\u003cbr\u003e",
                "operationId": "UserController.Login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body of user login info",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UserLoginDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} Login success!"
                    },
                    "403": {
                        "description": "{string} User does not exist!"
                    }
                }
            }
        },
        "/user/logout": {
            "post": {
                "tags": [
                    "user"
                ],
                "description": "Logs out current logged in user session\n\u003cbr\u003e",
                "operationId": "UserController.Logout",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "{string} Logout success!"
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "tags": [
                    "user"
                ],
                "description": "Register user into the system\n\u003cbr\u003e",
                "operationId": "UserController.Register",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body of user register info",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UserRegisterDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} Register success!"
                    },
                    "403": {
                        "description": "{string} Register failure! Fill all fields!"
                    }
                }
            }
        },
        "/user/{uuid}": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "Get user by uuid\n\u003cbr\u003e",
                "operationId": "UserController.Get",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "description": "The uuid of user to get",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": "{string} Uuid is empty!"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "description": "Update the user\n\u003cbr\u003e",
                "operationId": "UserController.Update",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "description": "The uuid you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body for user content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": "{string} Uuid is not int!"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "description": "delete the user\n\u003cbr\u003e",
                "operationId": "UserController.Delete",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "description": "The uid you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} Deleted user: uuid"
                    },
                    "403": {
                        "description": "{string} User not found: uuid"
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.UserLoginDto": {
            "title": "UserLoginDto",
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dtos.UserRegisterDto": {
            "title": "UserRegisterDto",
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "title": "User",
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "name": "user",
            "description": "Operations about Users\n"
        }
    ]
}